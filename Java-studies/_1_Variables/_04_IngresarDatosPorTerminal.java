package _1_Variables;
import java.util.Scanner;
import java.util.InputMismatchException;
    /* En este codigo vamos a importar dos clases.
        Pon mucha atenci√≥n en d√≥nde van y para qu√© se utilizan. */

public class _04_IngresarDatosPorTerminal {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
            /* En esta l√≠nea se crea una instancia de la clase "Scanner", un objeto.
                El constructor de esta clase espera un argumento. As√≠ que le daremos una entrada de tipo String.
                Cabe resaltar que en esta ocasi√≥n usaremos "System.in" para que el usuario ingrese los datos.
                
                Notese que tanto el "JOptionPane" como el "System.in" cumplen funciones similares. Sin embargo, JOptionPane abre una ventana emergente, y 
                System.in pide los valores por la terminal. */
        
        System.out.println("\nIngrese un n√∫mero entero: ");
            /* A diferencia de utilizar JOptionPane, en esta ocasi√≥n debemos colocar el mensaje que solicit√© el ingreso de datos en una l√≠nea aparte. */

        // String numeroStr = scanner.nextLine();
            /* Se crea la variable que va a almacenar el dato que ingrese el usuario, y se le asigna como valor el mismo que tiene la instancia creada: scanner.
            
                El m√©todo "nextLine" obtiene el valor que ingresa el usuario por la terminal, siempre y cuando este sea de tipo String.
                Adem√°s, obliga al programa a frenarse hasta que el usuario ingrese alg√∫n tipo de dato por la terminal.
                
                **ESTA L√?NEA SE ENCUENTRA COMENTADA PORQUE SE BUSCA EXPLICAR LO QUE HACE, PERO NO ES NECESARIA YA QUE A CONTINUACI√ìN SE REEMPLAZAR√?
                    POR OTRA L√?NEA DE C√ìDIGO M√?S √ìPTIMA.** */
        
        int numeroIngresado = 0;
        try{                   
            // numeroIngresado = Integer.parseInt(numeroStr);
                /* **ESTA L√?NEA SE ENCUENTRA COMENTADA PORQUE SE BUSCA EXPLICAR LO QUE HACE, PERO NO ES NECESARIA YA QUE A CONTINUACI√ìN SE REEMPLAZAR√?
                    POR OTRA L√?NEA DE C√ìDIGO M√?S √ìPTIMA.** */

            numeroIngresado = scanner.nextInt();
            /* Si has estado leyendo los comentarios, ya te puedes ahcer una √≠dea de la funcionalidad de est√° l√≠nea.
            
                Al usar esta √∫nica l√≠nea de c√≥digo, reemplazamos el tener que asignarle un valor tipo String a una variable y luego tener que convertirlo a un tipo num√©rico.
                En su lugar, asignamos un valor directamente num√©rico a una variable.
                
                A√∫n as√≠, este no es el √∫nico cambio que debemos de efectuar si decidimos optar por esta soluci√≥n.
                La expeci√≥n generada por esta l√≠nea de c√≥digo es diferente a la excepci√≥n generada cuando queremos convertir un dato de tipo texto a num√©rico y no se puede. */

        } catch(InputMismatchException e){
            /* Hemos tenido que cambiar el error "NumberFormatException" pues ya no nos es √∫til en este c√≥digo.
                En su lugar, hemos tenido que colocar el error "InputMismatchException". Para esto tambi√©n hemos tenido que importar la clase correspondiente de la excepci√≥n.
                
                ** HAY QUE TENER EN CUENTA QUE AL FINAL, TODAS LAS EXCEPCIONES SON OBJETOS DE UNA CLASE MAESTRA LLAMADA "Exception".
                ESTO QUIERO DECIR QUE SI PONEMOS COMO ARGUMENTO LA CLASE "Exception", SE CAPTURARAN TODOS LOS ERRORES DE FORMA GENERAL. ** */

            System.out.println("ERROR: Debe ingresar un n√∫mero entero.\n");
            main(args);
            System.exit(0);
        }

        String mensaje_1 = "\nEl n√∫mero ingresado por el usuario es: " + numeroIngresado;
        String mensaje_2 = "El n√∫mero ingresado por el usuario, si estuviese en el sistema binario, ser√≠a: " + Integer.toBinaryString(numeroIngresado);
        String mensaje_3 = "El n√∫mero ingresado por el usuario, si estuviese en el sistema octal, ser√≠a: " + Integer.toOctalString(numeroIngresado);
        String mensaje_4 = "El n√∫mero ingresado por el usuario, si estuviese en el sistema hexadecimal, ser√≠a: " + Integer.toHexString(numeroIngresado) + "\n";
            /* Para intentar hacer el c√≥digo un poco m√°s legible, acabamos de asignarle una variable a cada texto que se debe imprimir por la consola. */

        String mensaje = mensaje_1 + "\n" + mensaje_2 + "\n" + mensaje_3 + "\n" + mensaje_4;
            /* Ahora todas esas variables se concatenan en una sola, y es esta la que finalmente imprimir√° el programa si todo sale bien.
                Fijese en los saltos de l√≠nea que se le agregaron. Esto se debe a que antes el salto de l√≠nea se daba por defecto por cada impresi√≥n, sin embargo
                ahora todo el texto se une en uno solo, por lo que es nuestra labor agregarlos en donde deben ir. */

        System.out.println(mensaje);
    }
}
